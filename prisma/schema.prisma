// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id
  username       String               @unique
  email          String               @unique
  password       String
  userType       UserType
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  careRecipients CareRecipient[]
  healthPros     HealthProfessional[]
  notifications  Notification[]
}

model CareRecipient {
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  gender           Gender
  contactInfo      String
  location         String
  healthBackground String
  displayPicture   String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  medicalRecords   MedicalRecord[]
  user             User            @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID           String          @unique
  Appointment      Appointment[]
  Review           Review[]
  Connection       Connection[]
}

model HealthProfessional {
  firstName            String
  lastName             String
  about                String
  gender               Gender
  specialization       Specialization  @relation(fields: [specializationId], references: [id], onDelete: Cascade)
  specializationId     String
  medicalLicenseNumber String
  contactInfo          String
  displayPicture       String
  experience           Int
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  medicalRecords       MedicalRecord[]
  user                 User            @relation(fields: [userID], references: [id])
  userID               String          @unique
  organization         Organization?   @relation(fields: [organizationID], references: [id], onDelete: Cascade)
  organizationID       String
  Appointment          Appointment[]
  Review               Review[]
  Connection           Connection[]
}

model Connection {
  id                   String             @id
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  careRecipient        CareRecipient      @relation(fields: [careRecipientID], references: [userID])
  careRecipientID      String
  healthProfessional   HealthProfessional @relation(fields: [healthProfessionalID], references: [userID])
  healthProfessionalID String
}

model Organization {
  id                 String               @id
  name               String
  location           String
  openTime           DateTime
  closeTime          DateTime
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  healthProfessional HealthProfessional[]
}

model Appointment {
  id                   String             @id
  date                 DateTime
  time                 DateTime
  purpose              String
  status               Status             @default(PENDING)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  careRecipient        CareRecipient      @relation(fields: [careRecipientID], references: [userID], onDelete: Cascade)
  careRecipientID      String
  healthProfessional   HealthProfessional @relation(fields: [healthProfessionalID], references: [userID], onDelete: Cascade)
  healthProfessionalID String
}

model MedicalRecord {
  id                   String             @id
  date                 DateTime
  diagnosis            String
  treatmentDetails     String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  careRecipient        CareRecipient      @relation(fields: [careRecipientID], references: [userID], onDelete: Cascade)
  careRecipientID      String
  healthProfessional   HealthProfessional @relation(fields: [healthProfessionalID], references: [userID], onDelete: Cascade)
  healthProfessionalID String
}

model Notification {
  id        String   @id
  message   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userID], references: [id])
  userID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specialization {
  id                 String               @id
  name               String               @unique
  HealthProfessional HealthProfessional[]
}

model Review {
  id                   String             @id
  first_name           String
  last_name            String
  text                 String
  rating               Float
  healthProfessionalID String
  healthProfessional   HealthProfessional @relation(fields: [healthProfessionalID], references: [userID])
  careRecipientID      String
  careRecipient        CareRecipient      @relation(fields: [careRecipientID], references: [userID])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum UserType {
  CARE_RECIPIENT
  HEALTH_PROFESSIONAL
  ORGANIZATION_ADMIN
  ADMIN
}

enum Status {
  PENDING
  UPCOMING
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
}
