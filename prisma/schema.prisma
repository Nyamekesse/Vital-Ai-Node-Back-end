// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User table
model User {
  id                 String              @id @unique @default(uuid())
  username           String              @unique
  email              String              @unique
  password           String
  userType           UserType
  careRecipient      CareRecipient?
  healthProfessional HealthProfessional?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model CareRecipient {
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  gender         String
  profilePicture String
  contactInfo    String
  location       String
  healthBio      String
  user           User            @relation(fields: [userId], references: [id])
  userId         String          @unique
  medicalRecords MedicalRecord[]
  appointments   Appointment[]
}

model HealthProfessional {
  firstName            String
  lastName             String
  specialization       String
  medicalLicenseNumber String
  profilePicture       String
  contactInfo          String
  user                 User            @relation(fields: [userId], references: [id])
  userId               String          @unique
  medicalRecords       MedicalRecord[]
  appointments         Appointment[]
  organization         Organization    @relation(fields: [organizationID], references: [id])
  organizationID       String
}

model Organization {
  id                  String               @id @unique @default(uuid())
  name                String               @unique
  location            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  healthProfessionals HealthProfessional[]
}

model MedicalRecord {
  id                   String             @id @unique @default(uuid())
  date                 DateTime
  diagnosis            String
  treatmentDetails     String
  careRecipient        CareRecipient      @relation(fields: [patientId], references: [userId])
  patientId            String
  healthProfessional   HealthProfessional @relation(fields: [healthProfessionalId], references: [userId])
  healthProfessionalId String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Appointment {
  id                   String             @id @unique @default(uuid())
  date                 DateTime
  time                 String
  status               String
  careRecipient        CareRecipient      @relation(fields: [patientId], references: [userId])
  patientId            String
  healthProfessional   HealthProfessional @relation(fields: [healthProfessionalId], references: [userId])
  healthProfessionalId String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum UserType {
  PATIENT
  HEALTHPROFESSIONAL
}
